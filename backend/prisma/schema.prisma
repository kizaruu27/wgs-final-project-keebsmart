generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  id           Int             @id @default(autoincrement())
  productName  String
  description  String
  brand        String
  categoryId   Int
  isActive     Boolean?        @default(false)
  specs        String[]        @db.VarChar
  soldTotal    Int?            @default(0)
  productImage ProductImage?
  productItem  ProductItem[]
  category     ProductCategory @relation(fields: [categoryId], references: [id])
}

model ProductImage {
  id              Int      @id @default(autoincrement())
  productId       Int      @unique
  imagePreviewUrl String
  imageUrls       String[]
  product         Products @relation(fields: [productId], references: [id])
}

model ProductCategory {
  id           Int          @id @default(autoincrement())
  categoryName String
  products     Products[]
  variations   Variations[]
}

model ProductItem {
  id                Int              @id @default(autoincrement())
  productId         Int
  variationOptionId Int
  productLogId      Int
  unitId            String           @default(cuid())
  imageURLs         String[]
  price             Int
  qty               Int
  status            String
  manufacturer      String
  sold              Int              @default(0)
  product           Products         @relation(fields: [productId], references: [id])
  productLog        ProductLog       @relation(fields: [productLogId], references: [id])
  variationOption   VariationOptions @relation(fields: [variationOptionId], references: [id])
  Cart              Cart[]           @relation("CartToProductItem")
  orders            Orders[]         @relation("OrdersToProductItem")
}

model Variations {
  id            Int                @id @default(autoincrement())
  categoryId    Int
  variationName String
  options       VariationOptions[]
  category      ProductCategory    @relation(fields: [categoryId], references: [id])
}

model VariationOptions {
  id             Int           @id @default(autoincrement())
  variationValue String
  variationId    Int
  productItems   ProductItem[]
  variations     Variations    @relation(fields: [variationId], references: [id])
}

model ProductLog {
  id          Int           @id @default(autoincrement())
  userId      String
  createdAt   DateTime      @default(now())
  process     String
  productItem ProductItem[]
  createdBy   User          @relation(fields: [userId], references: [id])
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  phoneNumber String
  isActive    Boolean
  access      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cart        Cart?
  messeges    Messeges[]
  orders      Orders[]
  productLog  ProductLog[]
  shipment    Shipping[]
  userAddress UserAddress[]
}

model UserAddress {
  id        Int        @id @default(autoincrement())
  userId    String
  street    String
  kelurahan String
  kecamatan String
  city      String
  province  String
  postCode  Int
  isDefault Boolean
  orders    Orders[]
  shipment  Shipping[]
  user      User       @relation(fields: [userId], references: [id])
}

model PaymentMethods {
  id          Int      @id @default(autoincrement())
  paymentType String
  orders      Orders[]
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id])
  ProductItem ProductItem[] @relation("CartToProductItem")
}

model Shipping {
  id           String      @id @default(uuid())
  shipmentName String      @default("KeebsMart Express")
  userId       String
  addressId    Int
  orders       Orders[]
  address      UserAddress @relation(fields: [addressId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Orders {
  orderId         String         @id @default(uuid())
  userId          String
  orderDate       DateTime       @default(now())
  paymentMethodId Int
  addressId       Int
  shippingId      String
  orderStatus     String
  orderTotal      Int
  totalPrice      Int
  orderNotes      String
  address         UserAddress    @relation(fields: [addressId], references: [id])
  paymentMethod   PaymentMethods @relation(fields: [paymentMethodId], references: [id])
  shipping        Shipping       @relation(fields: [shippingId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  productItems    ProductItem[]  @relation("OrdersToProductItem")
}

model Messeges {
  id     Int    @id @default(autoincrement())
  userId String
  msg    String
  user   User   @relation(fields: [userId], references: [id])
}
