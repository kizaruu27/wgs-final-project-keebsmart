// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  id Int @id @default(autoincrement())
  product_name String
  description String
  categoryId Int
  category ProductCategory @relation(fields: [categoryId], references: [id])
  productItem ProductItem[]
}

model ProductCategory {
  id Int @id @default(autoincrement())
  category_name String
  products Products[]
  variations Variations[]
}

model ProductItem {
  id Int @id @default(autoincrement())
  productId Int
  product Products @relation(fields: [productId], references: [id])
  variationOptionId Int
  variationOption VariationOptions @relation(fields: [variationOptionId], references: [id])
  productLogId Int
  productLog ProductLog @relation(fields: [productLogId], references: [id])
  cartId Int
  cart Cart @relation(fields: [cartId], references: [id])
  unitId String @default(cuid())
  imageURLs String []
  price Int
  manufacturer String
  qty Int
  status String
  orders Orders []
}

model Variations {
  id Int @id @default(autoincrement())
  categoryId Int
  category ProductCategory @relation(fields: [categoryId], references: [id])
  variationName String
  options VariationOptions[]
}

model VariationOptions {
  id Int @id @default(autoincrement())
  variationValue String
  variationId Int
  variations Variations @relation(fields: [variationId], references: [id])
  productItems ProductItem[]
}

model ProductLog {
  id Int @id @default(autoincrement())
  userId String
  createdBy User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  process String
  productItem ProductItem[]
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  phoneNumber String
  isActive Boolean
  access String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productLog ProductLog []
  userAddress UserAddress []
  cart Cart []
  shipment Shipping []
  orders Orders []
  messeges Messeges []
}

model UserAddress {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id])
  street String
  kelurahan String
  kecamatan String
  city String
  province String
  postCode Int
  isDefault Boolean
  orders Orders []
  shipment Shipping []
}

model PaymentMethods {
  id Int @id @default(autoincrement())
  paymentType String
  orders Orders []
}

model Cart {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id])
  productItem ProductItem []
}
model Shipping {
  id String @id @default(uuid())
  shipmentName String @default("KeebsMart Express")
  userId String
  user User @relation(fields: [userId], references: [id])
  addressId Int
  address UserAddress @relation(fields: [addressId], references: [id])
  orders Orders []
}

model Orders {
  orderId String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  orderDate DateTime @default(now())
  paymentMethodId Int
  paymentMethod PaymentMethods @relation(fields: [paymentMethodId], references: [id])
  addressId Int
  address UserAddress @relation(fields: [addressId], references: [id])
  shippingId String
  shipping Shipping @relation(fields: [shippingId], references: [id])
  orderStatus String
  productItems ProductItem []
  orderTotal Int
  totalPrice Int
  orderNotes String
}

model Messeges {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id])
  msg String
}
